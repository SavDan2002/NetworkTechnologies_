// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Snakes.proto

package Snakes;

/**
 * <pre>
 * Текущее состояние игрового поля 
 * </pre>
 *
 * Protobuf type {@code snakes.GameState}
 */
public final class GameState extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:snakes.GameState)
    GameStateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GameState.newBuilder() to construct.
  private GameState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GameState() {
    snakes_ = java.util.Collections.emptyList();
    foods_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new GameState();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private GameState(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            bitField0_ |= 0x00000001;
            stateOrder_ = input.readInt32();
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              snakes_ = new java.util.ArrayList<Snakes.GameState.Snake>();
              mutable_bitField0_ |= 0x00000002;
            }
            snakes_.add(
                input.readMessage(Snakes.GameState.Snake.PARSER, extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              foods_ = new java.util.ArrayList<Snakes.GameState.Coord>();
              mutable_bitField0_ |= 0x00000004;
            }
            foods_.add(
                input.readMessage(Snakes.GameState.Coord.PARSER, extensionRegistry));
            break;
          }
          case 34: {
            Snakes.GamePlayers.Builder subBuilder = null;
            if (((bitField0_ & 0x00000002) != 0)) {
              subBuilder = players_.toBuilder();
            }
            players_ = input.readMessage(Snakes.GamePlayers.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(players_);
              players_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000002;
            break;
          }
          case 42: {
            Snakes.GameConfig.Builder subBuilder = null;
            if (((bitField0_ & 0x00000004) != 0)) {
              subBuilder = config_.toBuilder();
            }
            config_ = input.readMessage(Snakes.GameConfig.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(config_);
              config_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000004;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        snakes_ = java.util.Collections.unmodifiableList(snakes_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        foods_ = java.util.Collections.unmodifiableList(foods_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Snakes.SnakesProto.internal_static_snakes_GameState_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Snakes.SnakesProto.internal_static_snakes_GameState_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            Snakes.GameState.class, Snakes.GameState.Builder.class);
  }

  public interface CoordOrBuilder extends
      // @@protoc_insertion_point(interface_extends:snakes.GameState.Coord)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * По горизонтальной оси, положительное направление - вправо
     * </pre>
     *
     * <code>optional sint32 x = 1 [default = 0];</code>
     * @return Whether the x field is set.
     */
    boolean hasX();
    /**
     * <pre>
     * По горизонтальной оси, положительное направление - вправо
     * </pre>
     *
     * <code>optional sint32 x = 1 [default = 0];</code>
     * @return The x.
     */
    int getX();

    /**
     * <pre>
     * По вертикальной оси, положительное направление - вниз
     * </pre>
     *
     * <code>optional sint32 y = 2 [default = 0];</code>
     * @return Whether the y field is set.
     */
    boolean hasY();
    /**
     * <pre>
     * По вертикальной оси, положительное направление - вниз
     * </pre>
     *
     * <code>optional sint32 y = 2 [default = 0];</code>
     * @return The y.
     */
    int getY();
  }
  /**
   * <pre>
   * Координаты в пределах игрового поля, либо относительное смещение координат.
   * Левая верхняя клетка поля имеет координаты (x=0, y=0).
   * Направление смещения задаётся знаком чисел. 
   * </pre>
   *
   * Protobuf type {@code snakes.GameState.Coord}
   */
  public static final class Coord extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:snakes.GameState.Coord)
      CoordOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Coord.newBuilder() to construct.
    private Coord(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Coord() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Coord();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Coord(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              y_ = input.readSInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Snakes.SnakesProto.internal_static_snakes_GameState_Coord_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Snakes.SnakesProto.internal_static_snakes_GameState_Coord_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Snakes.GameState.Coord.class, Snakes.GameState.Coord.Builder.class);
    }

    private int bitField0_;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <pre>
     * По горизонтальной оси, положительное направление - вправо
     * </pre>
     *
     * <code>optional sint32 x = 1 [default = 0];</code>
     * @return Whether the x field is set.
     */
    @java.lang.Override
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * По горизонтальной оси, положительное направление - вправо
     * </pre>
     *
     * <code>optional sint32 x = 1 [default = 0];</code>
     * @return The x.
     */
    @java.lang.Override
    public int getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    /**
     * <pre>
     * По вертикальной оси, положительное направление - вниз
     * </pre>
     *
     * <code>optional sint32 y = 2 [default = 0];</code>
     * @return Whether the y field is set.
     */
    @java.lang.Override
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * По вертикальной оси, положительное направление - вниз
     * </pre>
     *
     * <code>optional sint32 y = 2 [default = 0];</code>
     * @return The y.
     */
    @java.lang.Override
    public int getY() {
      return y_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeSInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeSInt32(2, y_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, y_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Snakes.GameState.Coord)) {
        return super.equals(obj);
      }
      Snakes.GameState.Coord other = (Snakes.GameState.Coord) obj;

      if (hasX() != other.hasX()) return false;
      if (hasX()) {
        if (getX()
            != other.getX()) return false;
      }
      if (hasY() != other.hasY()) return false;
      if (hasY()) {
        if (getY()
            != other.getY()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasX()) {
        hash = (37 * hash) + X_FIELD_NUMBER;
        hash = (53 * hash) + getX();
      }
      if (hasY()) {
        hash = (37 * hash) + Y_FIELD_NUMBER;
        hash = (53 * hash) + getY();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Snakes.GameState.Coord parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Snakes.GameState.Coord parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Snakes.GameState.Coord parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Snakes.GameState.Coord parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Snakes.GameState.Coord parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Snakes.GameState.Coord parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Snakes.GameState.Coord parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Snakes.GameState.Coord parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Snakes.GameState.Coord parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Snakes.GameState.Coord parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Snakes.GameState.Coord parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Snakes.GameState.Coord parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Snakes.GameState.Coord prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Координаты в пределах игрового поля, либо относительное смещение координат.
     * Левая верхняя клетка поля имеет координаты (x=0, y=0).
     * Направление смещения задаётся знаком чисел. 
     * </pre>
     *
     * Protobuf type {@code snakes.GameState.Coord}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:snakes.GameState.Coord)
        Snakes.GameState.CoordOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Snakes.SnakesProto.internal_static_snakes_GameState_Coord_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Snakes.SnakesProto.internal_static_snakes_GameState_Coord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Snakes.GameState.Coord.class, Snakes.GameState.Coord.Builder.class);
      }

      // Construct using Snakes.GameState.Coord.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Snakes.SnakesProto.internal_static_snakes_GameState_Coord_descriptor;
      }

      @java.lang.Override
      public Snakes.GameState.Coord getDefaultInstanceForType() {
        return Snakes.GameState.Coord.getDefaultInstance();
      }

      @java.lang.Override
      public Snakes.GameState.Coord build() {
        Snakes.GameState.Coord result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public Snakes.GameState.Coord buildPartial() {
        Snakes.GameState.Coord result = new Snakes.GameState.Coord(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.x_ = x_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.y_ = y_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Snakes.GameState.Coord) {
          return mergeFrom((Snakes.GameState.Coord)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Snakes.GameState.Coord other) {
        if (other == Snakes.GameState.Coord.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Snakes.GameState.Coord parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Snakes.GameState.Coord) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int x_ ;
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @return Whether the x field is set.
       */
      @java.lang.Override
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @return The x.
       */
      @java.lang.Override
      public int getX() {
        return x_;
      }
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @param value The x to set.
       * @return This builder for chaining.
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        onChanged();
        return this;
      }

      private int y_ ;
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @return Whether the y field is set.
       */
      @java.lang.Override
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @return The y.
       */
      @java.lang.Override
      public int getY() {
        return y_;
      }
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @param value The y to set.
       * @return This builder for chaining.
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:snakes.GameState.Coord)
    }

    // @@protoc_insertion_point(class_scope:snakes.GameState.Coord)
    private static final Snakes.GameState.Coord DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Snakes.GameState.Coord();
    }

    public static Snakes.GameState.Coord getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Coord>
        PARSER = new com.google.protobuf.AbstractParser<Coord>() {
      @java.lang.Override
      public Coord parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Coord(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Coord> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Coord> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public Snakes.GameState.Coord getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SnakeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:snakes.GameState.Snake)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Идентификатор игрока-владельца змеи, см. GamePlayer.id
     * </pre>
     *
     * <code>required int32 player_id = 1;</code>
     * @return Whether the playerId field is set.
     */
    boolean hasPlayerId();
    /**
     * <pre>
     * Идентификатор игрока-владельца змеи, см. GamePlayer.id
     * </pre>
     *
     * <code>required int32 player_id = 1;</code>
     * @return The playerId.
     */
    int getPlayerId();

    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    java.util.List<Snakes.GameState.Coord> 
        getPointsList();
    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    Snakes.GameState.Coord getPoints(int index);
    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    int getPointsCount();
    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    java.util.List<? extends Snakes.GameState.CoordOrBuilder> 
        getPointsOrBuilderList();
    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    Snakes.GameState.CoordOrBuilder getPointsOrBuilder(
        int index);

    /**
     * <pre>
     * статус змеи в игре
     * </pre>
     *
     * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
     * @return Whether the state field is set.
     */
    boolean hasState();
    /**
     * <pre>
     * статус змеи в игре
     * </pre>
     *
     * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
     * @return The state.
     */
    Snakes.GameState.Snake.SnakeState getState();

    /**
     * <pre>
     * Направление, в котором повёрнута голова змейки в текущий момент
     * </pre>
     *
     * <code>required .snakes.Direction head_direction = 4;</code>
     * @return Whether the headDirection field is set.
     */
    boolean hasHeadDirection();
    /**
     * <pre>
     * Направление, в котором повёрнута голова змейки в текущий момент
     * </pre>
     *
     * <code>required .snakes.Direction head_direction = 4;</code>
     * @return The headDirection.
     */
    Snakes.Direction getHeadDirection();
  }
  /**
   * <pre>
   * Змея
   * </pre>
   *
   * Protobuf type {@code snakes.GameState.Snake}
   */
  public static final class Snake extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:snakes.GameState.Snake)
      SnakeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Snake.newBuilder() to construct.
    private Snake(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Snake() {
      points_ = java.util.Collections.emptyList();
      state_ = 0;
      headDirection_ = 1;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Snake();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Snake(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              playerId_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                points_ = new java.util.ArrayList<Snakes.GameState.Coord>();
                mutable_bitField0_ |= 0x00000002;
              }
              points_.add(
                  input.readMessage(Snakes.GameState.Coord.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              Snakes.GameState.Snake.SnakeState value = Snakes.GameState.Snake.SnakeState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                state_ = rawValue;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              Snakes.Direction value = Snakes.Direction.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                headDirection_ = rawValue;
              }
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          points_ = java.util.Collections.unmodifiableList(points_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Snakes.SnakesProto.internal_static_snakes_GameState_Snake_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Snakes.SnakesProto.internal_static_snakes_GameState_Snake_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Snakes.GameState.Snake.class, Snakes.GameState.Snake.Builder.class);
    }

    /**
     * <pre>
     * Статус змеи в игре
     * </pre>
     *
     * Protobuf enum {@code snakes.GameState.Snake.SnakeState}
     */
    public enum SnakeState
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Змея управляется игроком
       * </pre>
       *
       * <code>ALIVE = 0;</code>
       */
      ALIVE(0),
      /**
       * <pre>
       * Змея принадлежала игроку, который вышел из игры, она продолжает движение куда глаза глядят
       * </pre>
       *
       * <code>ZOMBIE = 1;</code>
       */
      ZOMBIE(1),
      ;

      /**
       * <pre>
       * Змея управляется игроком
       * </pre>
       *
       * <code>ALIVE = 0;</code>
       */
      public static final int ALIVE_VALUE = 0;
      /**
       * <pre>
       * Змея принадлежала игроку, который вышел из игры, она продолжает движение куда глаза глядят
       * </pre>
       *
       * <code>ZOMBIE = 1;</code>
       */
      public static final int ZOMBIE_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SnakeState valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static SnakeState forNumber(int value) {
        switch (value) {
          case 0: return ALIVE;
          case 1: return ZOMBIE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SnakeState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SnakeState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SnakeState>() {
              public SnakeState findValueByNumber(int number) {
                return SnakeState.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return Snakes.GameState.Snake.getDescriptor().getEnumTypes().get(0);
      }

      private static final SnakeState[] VALUES = values();

      public static SnakeState valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SnakeState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:snakes.GameState.Snake.SnakeState)
    }

    private int bitField0_;
    public static final int PLAYER_ID_FIELD_NUMBER = 1;
    private int playerId_;
    /**
     * <pre>
     * Идентификатор игрока-владельца змеи, см. GamePlayer.id
     * </pre>
     *
     * <code>required int32 player_id = 1;</code>
     * @return Whether the playerId field is set.
     */
    @java.lang.Override
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Идентификатор игрока-владельца змеи, см. GamePlayer.id
     * </pre>
     *
     * <code>required int32 player_id = 1;</code>
     * @return The playerId.
     */
    @java.lang.Override
    public int getPlayerId() {
      return playerId_;
    }

    public static final int POINTS_FIELD_NUMBER = 2;
    private java.util.List<Snakes.GameState.Coord> points_;
    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    @java.lang.Override
    public java.util.List<Snakes.GameState.Coord> getPointsList() {
      return points_;
    }
    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends Snakes.GameState.CoordOrBuilder> 
        getPointsOrBuilderList() {
      return points_;
    }
    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    @java.lang.Override
    public int getPointsCount() {
      return points_.size();
    }
    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    @java.lang.Override
    public Snakes.GameState.Coord getPoints(int index) {
      return points_.get(index);
    }
    /**
     * <pre>
     * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
     * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
     * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord points = 2;</code>
     */
    @java.lang.Override
    public Snakes.GameState.CoordOrBuilder getPointsOrBuilder(
        int index) {
      return points_.get(index);
    }

    public static final int STATE_FIELD_NUMBER = 3;
    private int state_;
    /**
     * <pre>
     * статус змеи в игре
     * </pre>
     *
     * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
     * @return Whether the state field is set.
     */
    @java.lang.Override public boolean hasState() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * статус змеи в игре
     * </pre>
     *
     * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
     * @return The state.
     */
    @java.lang.Override public Snakes.GameState.Snake.SnakeState getState() {
      @SuppressWarnings("deprecation")
      Snakes.GameState.Snake.SnakeState result = Snakes.GameState.Snake.SnakeState.valueOf(state_);
      return result == null ? Snakes.GameState.Snake.SnakeState.ALIVE : result;
    }

    public static final int HEAD_DIRECTION_FIELD_NUMBER = 4;
    private int headDirection_;
    /**
     * <pre>
     * Направление, в котором повёрнута голова змейки в текущий момент
     * </pre>
     *
     * <code>required .snakes.Direction head_direction = 4;</code>
     * @return Whether the headDirection field is set.
     */
    @java.lang.Override public boolean hasHeadDirection() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Направление, в котором повёрнута голова змейки в текущий момент
     * </pre>
     *
     * <code>required .snakes.Direction head_direction = 4;</code>
     * @return The headDirection.
     */
    @java.lang.Override public Snakes.Direction getHeadDirection() {
      @SuppressWarnings("deprecation")
      Snakes.Direction result = Snakes.Direction.valueOf(headDirection_);
      return result == null ? Snakes.Direction.UP : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPlayerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHeadDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, playerId_);
      }
      for (int i = 0; i < points_.size(); i++) {
        output.writeMessage(2, points_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(3, state_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(4, headDirection_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, playerId_);
      }
      for (int i = 0; i < points_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, points_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, state_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, headDirection_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Snakes.GameState.Snake)) {
        return super.equals(obj);
      }
      Snakes.GameState.Snake other = (Snakes.GameState.Snake) obj;

      if (hasPlayerId() != other.hasPlayerId()) return false;
      if (hasPlayerId()) {
        if (getPlayerId()
            != other.getPlayerId()) return false;
      }
      if (!getPointsList()
          .equals(other.getPointsList())) return false;
      if (hasState() != other.hasState()) return false;
      if (hasState()) {
        if (state_ != other.state_) return false;
      }
      if (hasHeadDirection() != other.hasHeadDirection()) return false;
      if (hasHeadDirection()) {
        if (headDirection_ != other.headDirection_) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPlayerId()) {
        hash = (37 * hash) + PLAYER_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPlayerId();
      }
      if (getPointsCount() > 0) {
        hash = (37 * hash) + POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getPointsList().hashCode();
      }
      if (hasState()) {
        hash = (37 * hash) + STATE_FIELD_NUMBER;
        hash = (53 * hash) + state_;
      }
      if (hasHeadDirection()) {
        hash = (37 * hash) + HEAD_DIRECTION_FIELD_NUMBER;
        hash = (53 * hash) + headDirection_;
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Snakes.GameState.Snake parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Snakes.GameState.Snake parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Snakes.GameState.Snake parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Snakes.GameState.Snake parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Snakes.GameState.Snake parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Snakes.GameState.Snake parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Snakes.GameState.Snake parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Snakes.GameState.Snake parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Snakes.GameState.Snake parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Snakes.GameState.Snake parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Snakes.GameState.Snake parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Snakes.GameState.Snake parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Snakes.GameState.Snake prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Змея
     * </pre>
     *
     * Protobuf type {@code snakes.GameState.Snake}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:snakes.GameState.Snake)
        Snakes.GameState.SnakeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Snakes.SnakesProto.internal_static_snakes_GameState_Snake_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Snakes.SnakesProto.internal_static_snakes_GameState_Snake_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Snakes.GameState.Snake.class, Snakes.GameState.Snake.Builder.class);
      }

      // Construct using Snakes.GameState.Snake.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPointsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        playerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (pointsBuilder_ == null) {
          points_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          pointsBuilder_.clear();
        }
        state_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        headDirection_ = 1;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Snakes.SnakesProto.internal_static_snakes_GameState_Snake_descriptor;
      }

      @java.lang.Override
      public Snakes.GameState.Snake getDefaultInstanceForType() {
        return Snakes.GameState.Snake.getDefaultInstance();
      }

      @java.lang.Override
      public Snakes.GameState.Snake build() {
        Snakes.GameState.Snake result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public Snakes.GameState.Snake buildPartial() {
        Snakes.GameState.Snake result = new Snakes.GameState.Snake(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.playerId_ = playerId_;
          to_bitField0_ |= 0x00000001;
        }
        if (pointsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            points_ = java.util.Collections.unmodifiableList(points_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.points_ = points_;
        } else {
          result.points_ = pointsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.headDirection_ = headDirection_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Snakes.GameState.Snake) {
          return mergeFrom((Snakes.GameState.Snake)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Snakes.GameState.Snake other) {
        if (other == Snakes.GameState.Snake.getDefaultInstance()) return this;
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (pointsBuilder_ == null) {
          if (!other.points_.isEmpty()) {
            if (points_.isEmpty()) {
              points_ = other.points_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePointsIsMutable();
              points_.addAll(other.points_);
            }
            onChanged();
          }
        } else {
          if (!other.points_.isEmpty()) {
            if (pointsBuilder_.isEmpty()) {
              pointsBuilder_.dispose();
              pointsBuilder_ = null;
              points_ = other.points_;
              bitField0_ = (bitField0_ & ~0x00000002);
              pointsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPointsFieldBuilder() : null;
            } else {
              pointsBuilder_.addAllMessages(other.points_);
            }
          }
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasHeadDirection()) {
          setHeadDirection(other.getHeadDirection());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasPlayerId()) {
          return false;
        }
        if (!hasState()) {
          return false;
        }
        if (!hasHeadDirection()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Snakes.GameState.Snake parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Snakes.GameState.Snake) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int playerId_ ;
      /**
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @return Whether the playerId field is set.
       */
      @java.lang.Override
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @return The playerId.
       */
      @java.lang.Override
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @param value The playerId to set.
       * @return This builder for chaining.
       */
      public Builder setPlayerId(int value) {
        bitField0_ |= 0x00000001;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<Snakes.GameState.Coord> points_ =
        java.util.Collections.emptyList();
      private void ensurePointsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          points_ = new java.util.ArrayList<Snakes.GameState.Coord>(points_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          Snakes.GameState.Coord, Snakes.GameState.Coord.Builder, Snakes.GameState.CoordOrBuilder> pointsBuilder_;

      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public java.util.List<Snakes.GameState.Coord> getPointsList() {
        if (pointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(points_);
        } else {
          return pointsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public int getPointsCount() {
        if (pointsBuilder_ == null) {
          return points_.size();
        } else {
          return pointsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Snakes.GameState.Coord getPoints(int index) {
        if (pointsBuilder_ == null) {
          return points_.get(index);
        } else {
          return pointsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Builder setPoints(
          int index, Snakes.GameState.Coord value) {
        if (pointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePointsIsMutable();
          points_.set(index, value);
          onChanged();
        } else {
          pointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Builder setPoints(
          int index, Snakes.GameState.Coord.Builder builderForValue) {
        if (pointsBuilder_ == null) {
          ensurePointsIsMutable();
          points_.set(index, builderForValue.build());
          onChanged();
        } else {
          pointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Builder addPoints(Snakes.GameState.Coord value) {
        if (pointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePointsIsMutable();
          points_.add(value);
          onChanged();
        } else {
          pointsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Builder addPoints(
          int index, Snakes.GameState.Coord value) {
        if (pointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePointsIsMutable();
          points_.add(index, value);
          onChanged();
        } else {
          pointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Builder addPoints(
          Snakes.GameState.Coord.Builder builderForValue) {
        if (pointsBuilder_ == null) {
          ensurePointsIsMutable();
          points_.add(builderForValue.build());
          onChanged();
        } else {
          pointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Builder addPoints(
          int index, Snakes.GameState.Coord.Builder builderForValue) {
        if (pointsBuilder_ == null) {
          ensurePointsIsMutable();
          points_.add(index, builderForValue.build());
          onChanged();
        } else {
          pointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Builder addAllPoints(
          java.lang.Iterable<? extends Snakes.GameState.Coord> values) {
        if (pointsBuilder_ == null) {
          ensurePointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, points_);
          onChanged();
        } else {
          pointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Builder clearPoints() {
        if (pointsBuilder_ == null) {
          points_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          pointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Builder removePoints(int index) {
        if (pointsBuilder_ == null) {
          ensurePointsIsMutable();
          points_.remove(index);
          onChanged();
        } else {
          pointsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Snakes.GameState.Coord.Builder getPointsBuilder(
          int index) {
        return getPointsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Snakes.GameState.CoordOrBuilder getPointsOrBuilder(
          int index) {
        if (pointsBuilder_ == null) {
          return points_.get(index);  } else {
          return pointsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public java.util.List<? extends Snakes.GameState.CoordOrBuilder> 
           getPointsOrBuilderList() {
        if (pointsBuilder_ != null) {
          return pointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(points_);
        }
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Snakes.GameState.Coord.Builder addPointsBuilder() {
        return getPointsFieldBuilder().addBuilder(
            Snakes.GameState.Coord.getDefaultInstance());
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public Snakes.GameState.Coord.Builder addPointsBuilder(
          int index) {
        return getPointsFieldBuilder().addBuilder(
            index, Snakes.GameState.Coord.getDefaultInstance());
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      public java.util.List<Snakes.GameState.Coord.Builder> 
           getPointsBuilderList() {
        return getPointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          Snakes.GameState.Coord, Snakes.GameState.Coord.Builder, Snakes.GameState.CoordOrBuilder> 
          getPointsFieldBuilder() {
        if (pointsBuilder_ == null) {
          pointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              Snakes.GameState.Coord, Snakes.GameState.Coord.Builder, Snakes.GameState.CoordOrBuilder>(
                  points_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          points_ = null;
        }
        return pointsBuilder_;
      }

      private int state_ = 0;
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @return Whether the state field is set.
       */
      @java.lang.Override public boolean hasState() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @return The state.
       */
      @java.lang.Override
      public Snakes.GameState.Snake.SnakeState getState() {
        @SuppressWarnings("deprecation")
        Snakes.GameState.Snake.SnakeState result = Snakes.GameState.Snake.SnakeState.valueOf(state_);
        return result == null ? Snakes.GameState.Snake.SnakeState.ALIVE : result;
      }
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @param value The state to set.
       * @return This builder for chaining.
       */
      public Builder setState(Snakes.GameState.Snake.SnakeState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        state_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @return This builder for chaining.
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000004);
        state_ = 0;
        onChanged();
        return this;
      }

      private int headDirection_ = 1;
      /**
       * <pre>
       * Направление, в котором повёрнута голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @return Whether the headDirection field is set.
       */
      @java.lang.Override public boolean hasHeadDirection() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Направление, в котором повёрнута голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @return The headDirection.
       */
      @java.lang.Override
      public Snakes.Direction getHeadDirection() {
        @SuppressWarnings("deprecation")
        Snakes.Direction result = Snakes.Direction.valueOf(headDirection_);
        return result == null ? Snakes.Direction.UP : result;
      }
      /**
       * <pre>
       * Направление, в котором повёрнута голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @param value The headDirection to set.
       * @return This builder for chaining.
       */
      public Builder setHeadDirection(Snakes.Direction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        headDirection_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Направление, в котором повёрнута голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeadDirection() {
        bitField0_ = (bitField0_ & ~0x00000008);
        headDirection_ = 1;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:snakes.GameState.Snake)
    }

    // @@protoc_insertion_point(class_scope:snakes.GameState.Snake)
    private static final Snakes.GameState.Snake DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Snakes.GameState.Snake();
    }

    public static Snakes.GameState.Snake getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Snake>
        PARSER = new com.google.protobuf.AbstractParser<Snake>() {
      @java.lang.Override
      public Snake parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Snake(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Snake> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Snake> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public Snakes.GameState.Snake getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int STATE_ORDER_FIELD_NUMBER = 1;
  private int stateOrder_;
  /**
   * <pre>
   * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
   * </pre>
   *
   * <code>required int32 state_order = 1;</code>
   * @return Whether the stateOrder field is set.
   */
  @java.lang.Override
  public boolean hasStateOrder() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
   * </pre>
   *
   * <code>required int32 state_order = 1;</code>
   * @return The stateOrder.
   */
  @java.lang.Override
  public int getStateOrder() {
    return stateOrder_;
  }

  public static final int SNAKES_FIELD_NUMBER = 2;
  private java.util.List<Snakes.GameState.Snake> snakes_;
  /**
   * <pre>
   * Список змей
   * </pre>
   *
   * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
   */
  @java.lang.Override
  public java.util.List<Snakes.GameState.Snake> getSnakesList() {
    return snakes_;
  }
  /**
   * <pre>
   * Список змей
   * </pre>
   *
   * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends Snakes.GameState.SnakeOrBuilder> 
      getSnakesOrBuilderList() {
    return snakes_;
  }
  /**
   * <pre>
   * Список змей
   * </pre>
   *
   * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
   */
  @java.lang.Override
  public int getSnakesCount() {
    return snakes_.size();
  }
  /**
   * <pre>
   * Список змей
   * </pre>
   *
   * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
   */
  @java.lang.Override
  public Snakes.GameState.Snake getSnakes(int index) {
    return snakes_.get(index);
  }
  /**
   * <pre>
   * Список змей
   * </pre>
   *
   * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
   */
  @java.lang.Override
  public Snakes.GameState.SnakeOrBuilder getSnakesOrBuilder(
      int index) {
    return snakes_.get(index);
  }

  public static final int FOODS_FIELD_NUMBER = 3;
  private java.util.List<Snakes.GameState.Coord> foods_;
  /**
   * <pre>
   * Список клеток с едой
   * </pre>
   *
   * <code>repeated .snakes.GameState.Coord foods = 3;</code>
   */
  @java.lang.Override
  public java.util.List<Snakes.GameState.Coord> getFoodsList() {
    return foods_;
  }
  /**
   * <pre>
   * Список клеток с едой
   * </pre>
   *
   * <code>repeated .snakes.GameState.Coord foods = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends Snakes.GameState.CoordOrBuilder> 
      getFoodsOrBuilderList() {
    return foods_;
  }
  /**
   * <pre>
   * Список клеток с едой
   * </pre>
   *
   * <code>repeated .snakes.GameState.Coord foods = 3;</code>
   */
  @java.lang.Override
  public int getFoodsCount() {
    return foods_.size();
  }
  /**
   * <pre>
   * Список клеток с едой
   * </pre>
   *
   * <code>repeated .snakes.GameState.Coord foods = 3;</code>
   */
  @java.lang.Override
  public Snakes.GameState.Coord getFoods(int index) {
    return foods_.get(index);
  }
  /**
   * <pre>
   * Список клеток с едой
   * </pre>
   *
   * <code>repeated .snakes.GameState.Coord foods = 3;</code>
   */
  @java.lang.Override
  public Snakes.GameState.CoordOrBuilder getFoodsOrBuilder(
      int index) {
    return foods_.get(index);
  }

  public static final int PLAYERS_FIELD_NUMBER = 4;
  private Snakes.GamePlayers players_;
  /**
   * <pre>
   * Актуальнейший список игроков
   * </pre>
   *
   * <code>required .snakes.GamePlayers players = 4;</code>
   * @return Whether the players field is set.
   */
  @java.lang.Override
  public boolean hasPlayers() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Актуальнейший список игроков
   * </pre>
   *
   * <code>required .snakes.GamePlayers players = 4;</code>
   * @return The players.
   */
  @java.lang.Override
  public Snakes.GamePlayers getPlayers() {
    return players_ == null ? Snakes.GamePlayers.getDefaultInstance() : players_;
  }
  /**
   * <pre>
   * Актуальнейший список игроков
   * </pre>
   *
   * <code>required .snakes.GamePlayers players = 4;</code>
   */
  @java.lang.Override
  public Snakes.GamePlayersOrBuilder getPlayersOrBuilder() {
    return players_ == null ? Snakes.GamePlayers.getDefaultInstance() : players_;
  }

  public static final int CONFIG_FIELD_NUMBER = 5;
  private Snakes.GameConfig config_;
  /**
   * <pre>
   * Параметры игры
   * </pre>
   *
   * <code>required .snakes.GameConfig config = 5;</code>
   * @return Whether the config field is set.
   */
  @java.lang.Override
  public boolean hasConfig() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Параметры игры
   * </pre>
   *
   * <code>required .snakes.GameConfig config = 5;</code>
   * @return The config.
   */
  @java.lang.Override
  public Snakes.GameConfig getConfig() {
    return config_ == null ? Snakes.GameConfig.getDefaultInstance() : config_;
  }
  /**
   * <pre>
   * Параметры игры
   * </pre>
   *
   * <code>required .snakes.GameConfig config = 5;</code>
   */
  @java.lang.Override
  public Snakes.GameConfigOrBuilder getConfigOrBuilder() {
    return config_ == null ? Snakes.GameConfig.getDefaultInstance() : config_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasStateOrder()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasPlayers()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasConfig()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getSnakesCount(); i++) {
      if (!getSnakes(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (!getPlayers().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt32(1, stateOrder_);
    }
    for (int i = 0; i < snakes_.size(); i++) {
      output.writeMessage(2, snakes_.get(i));
    }
    for (int i = 0; i < foods_.size(); i++) {
      output.writeMessage(3, foods_.get(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(4, getPlayers());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(5, getConfig());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, stateOrder_);
    }
    for (int i = 0; i < snakes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, snakes_.get(i));
    }
    for (int i = 0; i < foods_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, foods_.get(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getPlayers());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getConfig());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof Snakes.GameState)) {
      return super.equals(obj);
    }
    Snakes.GameState other = (Snakes.GameState) obj;

    if (hasStateOrder() != other.hasStateOrder()) return false;
    if (hasStateOrder()) {
      if (getStateOrder()
          != other.getStateOrder()) return false;
    }
    if (!getSnakesList()
        .equals(other.getSnakesList())) return false;
    if (!getFoodsList()
        .equals(other.getFoodsList())) return false;
    if (hasPlayers() != other.hasPlayers()) return false;
    if (hasPlayers()) {
      if (!getPlayers()
          .equals(other.getPlayers())) return false;
    }
    if (hasConfig() != other.hasConfig()) return false;
    if (hasConfig()) {
      if (!getConfig()
          .equals(other.getConfig())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasStateOrder()) {
      hash = (37 * hash) + STATE_ORDER_FIELD_NUMBER;
      hash = (53 * hash) + getStateOrder();
    }
    if (getSnakesCount() > 0) {
      hash = (37 * hash) + SNAKES_FIELD_NUMBER;
      hash = (53 * hash) + getSnakesList().hashCode();
    }
    if (getFoodsCount() > 0) {
      hash = (37 * hash) + FOODS_FIELD_NUMBER;
      hash = (53 * hash) + getFoodsList().hashCode();
    }
    if (hasPlayers()) {
      hash = (37 * hash) + PLAYERS_FIELD_NUMBER;
      hash = (53 * hash) + getPlayers().hashCode();
    }
    if (hasConfig()) {
      hash = (37 * hash) + CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getConfig().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static Snakes.GameState parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Snakes.GameState parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Snakes.GameState parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Snakes.GameState parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Snakes.GameState parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Snakes.GameState parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Snakes.GameState parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static Snakes.GameState parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static Snakes.GameState parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static Snakes.GameState parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static Snakes.GameState parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static Snakes.GameState parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Snakes.GameState prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Текущее состояние игрового поля 
   * </pre>
   *
   * Protobuf type {@code snakes.GameState}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:snakes.GameState)
      Snakes.GameStateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Snakes.SnakesProto.internal_static_snakes_GameState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Snakes.SnakesProto.internal_static_snakes_GameState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Snakes.GameState.class, Snakes.GameState.Builder.class);
    }

    // Construct using Snakes.GameState.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSnakesFieldBuilder();
        getFoodsFieldBuilder();
        getPlayersFieldBuilder();
        getConfigFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      stateOrder_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      if (snakesBuilder_ == null) {
        snakes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        snakesBuilder_.clear();
      }
      if (foodsBuilder_ == null) {
        foods_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        foodsBuilder_.clear();
      }
      if (playersBuilder_ == null) {
        players_ = null;
      } else {
        playersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      if (configBuilder_ == null) {
        config_ = null;
      } else {
        configBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Snakes.SnakesProto.internal_static_snakes_GameState_descriptor;
    }

    @java.lang.Override
    public Snakes.GameState getDefaultInstanceForType() {
      return Snakes.GameState.getDefaultInstance();
    }

    @java.lang.Override
    public Snakes.GameState build() {
      Snakes.GameState result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public Snakes.GameState buildPartial() {
      Snakes.GameState result = new Snakes.GameState(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.stateOrder_ = stateOrder_;
        to_bitField0_ |= 0x00000001;
      }
      if (snakesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          snakes_ = java.util.Collections.unmodifiableList(snakes_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.snakes_ = snakes_;
      } else {
        result.snakes_ = snakesBuilder_.build();
      }
      if (foodsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          foods_ = java.util.Collections.unmodifiableList(foods_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.foods_ = foods_;
      } else {
        result.foods_ = foodsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        if (playersBuilder_ == null) {
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        if (configBuilder_ == null) {
          result.config_ = config_;
        } else {
          result.config_ = configBuilder_.build();
        }
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof Snakes.GameState) {
        return mergeFrom((Snakes.GameState)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(Snakes.GameState other) {
      if (other == Snakes.GameState.getDefaultInstance()) return this;
      if (other.hasStateOrder()) {
        setStateOrder(other.getStateOrder());
      }
      if (snakesBuilder_ == null) {
        if (!other.snakes_.isEmpty()) {
          if (snakes_.isEmpty()) {
            snakes_ = other.snakes_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSnakesIsMutable();
            snakes_.addAll(other.snakes_);
          }
          onChanged();
        }
      } else {
        if (!other.snakes_.isEmpty()) {
          if (snakesBuilder_.isEmpty()) {
            snakesBuilder_.dispose();
            snakesBuilder_ = null;
            snakes_ = other.snakes_;
            bitField0_ = (bitField0_ & ~0x00000002);
            snakesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSnakesFieldBuilder() : null;
          } else {
            snakesBuilder_.addAllMessages(other.snakes_);
          }
        }
      }
      if (foodsBuilder_ == null) {
        if (!other.foods_.isEmpty()) {
          if (foods_.isEmpty()) {
            foods_ = other.foods_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureFoodsIsMutable();
            foods_.addAll(other.foods_);
          }
          onChanged();
        }
      } else {
        if (!other.foods_.isEmpty()) {
          if (foodsBuilder_.isEmpty()) {
            foodsBuilder_.dispose();
            foodsBuilder_ = null;
            foods_ = other.foods_;
            bitField0_ = (bitField0_ & ~0x00000004);
            foodsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFoodsFieldBuilder() : null;
          } else {
            foodsBuilder_.addAllMessages(other.foods_);
          }
        }
      }
      if (other.hasPlayers()) {
        mergePlayers(other.getPlayers());
      }
      if (other.hasConfig()) {
        mergeConfig(other.getConfig());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!hasStateOrder()) {
        return false;
      }
      if (!hasPlayers()) {
        return false;
      }
      if (!hasConfig()) {
        return false;
      }
      for (int i = 0; i < getSnakesCount(); i++) {
        if (!getSnakes(i).isInitialized()) {
          return false;
        }
      }
      if (!getPlayers().isInitialized()) {
        return false;
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Snakes.GameState parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (Snakes.GameState) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int stateOrder_ ;
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @return Whether the stateOrder field is set.
     */
    @java.lang.Override
    public boolean hasStateOrder() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @return The stateOrder.
     */
    @java.lang.Override
    public int getStateOrder() {
      return stateOrder_;
    }
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @param value The stateOrder to set.
     * @return This builder for chaining.
     */
    public Builder setStateOrder(int value) {
      bitField0_ |= 0x00000001;
      stateOrder_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearStateOrder() {
      bitField0_ = (bitField0_ & ~0x00000001);
      stateOrder_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<Snakes.GameState.Snake> snakes_ =
      java.util.Collections.emptyList();
    private void ensureSnakesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        snakes_ = new java.util.ArrayList<Snakes.GameState.Snake>(snakes_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        Snakes.GameState.Snake, Snakes.GameState.Snake.Builder, Snakes.GameState.SnakeOrBuilder> snakesBuilder_;

    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public java.util.List<Snakes.GameState.Snake> getSnakesList() {
      if (snakesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(snakes_);
      } else {
        return snakesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public int getSnakesCount() {
      if (snakesBuilder_ == null) {
        return snakes_.size();
      } else {
        return snakesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Snakes.GameState.Snake getSnakes(int index) {
      if (snakesBuilder_ == null) {
        return snakes_.get(index);
      } else {
        return snakesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Builder setSnakes(
        int index, Snakes.GameState.Snake value) {
      if (snakesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSnakesIsMutable();
        snakes_.set(index, value);
        onChanged();
      } else {
        snakesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Builder setSnakes(
        int index, Snakes.GameState.Snake.Builder builderForValue) {
      if (snakesBuilder_ == null) {
        ensureSnakesIsMutable();
        snakes_.set(index, builderForValue.build());
        onChanged();
      } else {
        snakesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Builder addSnakes(Snakes.GameState.Snake value) {
      if (snakesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSnakesIsMutable();
        snakes_.add(value);
        onChanged();
      } else {
        snakesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Builder addSnakes(
        int index, Snakes.GameState.Snake value) {
      if (snakesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSnakesIsMutable();
        snakes_.add(index, value);
        onChanged();
      } else {
        snakesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Builder addSnakes(
        Snakes.GameState.Snake.Builder builderForValue) {
      if (snakesBuilder_ == null) {
        ensureSnakesIsMutable();
        snakes_.add(builderForValue.build());
        onChanged();
      } else {
        snakesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Builder addSnakes(
        int index, Snakes.GameState.Snake.Builder builderForValue) {
      if (snakesBuilder_ == null) {
        ensureSnakesIsMutable();
        snakes_.add(index, builderForValue.build());
        onChanged();
      } else {
        snakesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Builder addAllSnakes(
        java.lang.Iterable<? extends Snakes.GameState.Snake> values) {
      if (snakesBuilder_ == null) {
        ensureSnakesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, snakes_);
        onChanged();
      } else {
        snakesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Builder clearSnakes() {
      if (snakesBuilder_ == null) {
        snakes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        snakesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Builder removeSnakes(int index) {
      if (snakesBuilder_ == null) {
        ensureSnakesIsMutable();
        snakes_.remove(index);
        onChanged();
      } else {
        snakesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Snakes.GameState.Snake.Builder getSnakesBuilder(
        int index) {
      return getSnakesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Snakes.GameState.SnakeOrBuilder getSnakesOrBuilder(
        int index) {
      if (snakesBuilder_ == null) {
        return snakes_.get(index);  } else {
        return snakesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public java.util.List<? extends Snakes.GameState.SnakeOrBuilder> 
         getSnakesOrBuilderList() {
      if (snakesBuilder_ != null) {
        return snakesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(snakes_);
      }
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Snakes.GameState.Snake.Builder addSnakesBuilder() {
      return getSnakesFieldBuilder().addBuilder(
          Snakes.GameState.Snake.getDefaultInstance());
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public Snakes.GameState.Snake.Builder addSnakesBuilder(
        int index) {
      return getSnakesFieldBuilder().addBuilder(
          index, Snakes.GameState.Snake.getDefaultInstance());
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    public java.util.List<Snakes.GameState.Snake.Builder> 
         getSnakesBuilderList() {
      return getSnakesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        Snakes.GameState.Snake, Snakes.GameState.Snake.Builder, Snakes.GameState.SnakeOrBuilder> 
        getSnakesFieldBuilder() {
      if (snakesBuilder_ == null) {
        snakesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            Snakes.GameState.Snake, Snakes.GameState.Snake.Builder, Snakes.GameState.SnakeOrBuilder>(
                snakes_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        snakes_ = null;
      }
      return snakesBuilder_;
    }

    private java.util.List<Snakes.GameState.Coord> foods_ =
      java.util.Collections.emptyList();
    private void ensureFoodsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        foods_ = new java.util.ArrayList<Snakes.GameState.Coord>(foods_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        Snakes.GameState.Coord, Snakes.GameState.Coord.Builder, Snakes.GameState.CoordOrBuilder> foodsBuilder_;

    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public java.util.List<Snakes.GameState.Coord> getFoodsList() {
      if (foodsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(foods_);
      } else {
        return foodsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public int getFoodsCount() {
      if (foodsBuilder_ == null) {
        return foods_.size();
      } else {
        return foodsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Snakes.GameState.Coord getFoods(int index) {
      if (foodsBuilder_ == null) {
        return foods_.get(index);
      } else {
        return foodsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Builder setFoods(
        int index, Snakes.GameState.Coord value) {
      if (foodsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFoodsIsMutable();
        foods_.set(index, value);
        onChanged();
      } else {
        foodsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Builder setFoods(
        int index, Snakes.GameState.Coord.Builder builderForValue) {
      if (foodsBuilder_ == null) {
        ensureFoodsIsMutable();
        foods_.set(index, builderForValue.build());
        onChanged();
      } else {
        foodsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Builder addFoods(Snakes.GameState.Coord value) {
      if (foodsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFoodsIsMutable();
        foods_.add(value);
        onChanged();
      } else {
        foodsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Builder addFoods(
        int index, Snakes.GameState.Coord value) {
      if (foodsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFoodsIsMutable();
        foods_.add(index, value);
        onChanged();
      } else {
        foodsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Builder addFoods(
        Snakes.GameState.Coord.Builder builderForValue) {
      if (foodsBuilder_ == null) {
        ensureFoodsIsMutable();
        foods_.add(builderForValue.build());
        onChanged();
      } else {
        foodsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Builder addFoods(
        int index, Snakes.GameState.Coord.Builder builderForValue) {
      if (foodsBuilder_ == null) {
        ensureFoodsIsMutable();
        foods_.add(index, builderForValue.build());
        onChanged();
      } else {
        foodsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Builder addAllFoods(
        java.lang.Iterable<? extends Snakes.GameState.Coord> values) {
      if (foodsBuilder_ == null) {
        ensureFoodsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, foods_);
        onChanged();
      } else {
        foodsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Builder clearFoods() {
      if (foodsBuilder_ == null) {
        foods_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        foodsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Builder removeFoods(int index) {
      if (foodsBuilder_ == null) {
        ensureFoodsIsMutable();
        foods_.remove(index);
        onChanged();
      } else {
        foodsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Snakes.GameState.Coord.Builder getFoodsBuilder(
        int index) {
      return getFoodsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Snakes.GameState.CoordOrBuilder getFoodsOrBuilder(
        int index) {
      if (foodsBuilder_ == null) {
        return foods_.get(index);  } else {
        return foodsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public java.util.List<? extends Snakes.GameState.CoordOrBuilder> 
         getFoodsOrBuilderList() {
      if (foodsBuilder_ != null) {
        return foodsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(foods_);
      }
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Snakes.GameState.Coord.Builder addFoodsBuilder() {
      return getFoodsFieldBuilder().addBuilder(
          Snakes.GameState.Coord.getDefaultInstance());
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public Snakes.GameState.Coord.Builder addFoodsBuilder(
        int index) {
      return getFoodsFieldBuilder().addBuilder(
          index, Snakes.GameState.Coord.getDefaultInstance());
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    public java.util.List<Snakes.GameState.Coord.Builder> 
         getFoodsBuilderList() {
      return getFoodsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        Snakes.GameState.Coord, Snakes.GameState.Coord.Builder, Snakes.GameState.CoordOrBuilder> 
        getFoodsFieldBuilder() {
      if (foodsBuilder_ == null) {
        foodsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            Snakes.GameState.Coord, Snakes.GameState.Coord.Builder, Snakes.GameState.CoordOrBuilder>(
                foods_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        foods_ = null;
      }
      return foodsBuilder_;
    }

    private Snakes.GamePlayers players_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Snakes.GamePlayers, Snakes.GamePlayers.Builder, Snakes.GamePlayersOrBuilder> playersBuilder_;
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     * @return Whether the players field is set.
     */
    public boolean hasPlayers() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     * @return The players.
     */
    public Snakes.GamePlayers getPlayers() {
      if (playersBuilder_ == null) {
        return players_ == null ? Snakes.GamePlayers.getDefaultInstance() : players_;
      } else {
        return playersBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    public Builder setPlayers(Snakes.GamePlayers value) {
      if (playersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        players_ = value;
        onChanged();
      } else {
        playersBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    public Builder setPlayers(
        Snakes.GamePlayers.Builder builderForValue) {
      if (playersBuilder_ == null) {
        players_ = builderForValue.build();
        onChanged();
      } else {
        playersBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    public Builder mergePlayers(Snakes.GamePlayers value) {
      if (playersBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
            players_ != null &&
            players_ != Snakes.GamePlayers.getDefaultInstance()) {
          players_ =
            Snakes.GamePlayers.newBuilder(players_).mergeFrom(value).buildPartial();
        } else {
          players_ = value;
        }
        onChanged();
      } else {
        playersBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    public Builder clearPlayers() {
      if (playersBuilder_ == null) {
        players_ = null;
        onChanged();
      } else {
        playersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    public Snakes.GamePlayers.Builder getPlayersBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getPlayersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    public Snakes.GamePlayersOrBuilder getPlayersOrBuilder() {
      if (playersBuilder_ != null) {
        return playersBuilder_.getMessageOrBuilder();
      } else {
        return players_ == null ?
            Snakes.GamePlayers.getDefaultInstance() : players_;
      }
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Snakes.GamePlayers, Snakes.GamePlayers.Builder, Snakes.GamePlayersOrBuilder> 
        getPlayersFieldBuilder() {
      if (playersBuilder_ == null) {
        playersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Snakes.GamePlayers, Snakes.GamePlayers.Builder, Snakes.GamePlayersOrBuilder>(
                getPlayers(),
                getParentForChildren(),
                isClean());
        players_ = null;
      }
      return playersBuilder_;
    }

    private Snakes.GameConfig config_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Snakes.GameConfig, Snakes.GameConfig.Builder, Snakes.GameConfigOrBuilder> configBuilder_;
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 5;</code>
     * @return Whether the config field is set.
     */
    public boolean hasConfig() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 5;</code>
     * @return The config.
     */
    public Snakes.GameConfig getConfig() {
      if (configBuilder_ == null) {
        return config_ == null ? Snakes.GameConfig.getDefaultInstance() : config_;
      } else {
        return configBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 5;</code>
     */
    public Builder setConfig(Snakes.GameConfig value) {
      if (configBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        config_ = value;
        onChanged();
      } else {
        configBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 5;</code>
     */
    public Builder setConfig(
        Snakes.GameConfig.Builder builderForValue) {
      if (configBuilder_ == null) {
        config_ = builderForValue.build();
        onChanged();
      } else {
        configBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 5;</code>
     */
    public Builder mergeConfig(Snakes.GameConfig value) {
      if (configBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
            config_ != null &&
            config_ != Snakes.GameConfig.getDefaultInstance()) {
          config_ =
            Snakes.GameConfig.newBuilder(config_).mergeFrom(value).buildPartial();
        } else {
          config_ = value;
        }
        onChanged();
      } else {
        configBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 5;</code>
     */
    public Builder clearConfig() {
      if (configBuilder_ == null) {
        config_ = null;
        onChanged();
      } else {
        configBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 5;</code>
     */
    public Snakes.GameConfig.Builder getConfigBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 5;</code>
     */
    public Snakes.GameConfigOrBuilder getConfigOrBuilder() {
      if (configBuilder_ != null) {
        return configBuilder_.getMessageOrBuilder();
      } else {
        return config_ == null ?
            Snakes.GameConfig.getDefaultInstance() : config_;
      }
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Snakes.GameConfig, Snakes.GameConfig.Builder, Snakes.GameConfigOrBuilder> 
        getConfigFieldBuilder() {
      if (configBuilder_ == null) {
        configBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Snakes.GameConfig, Snakes.GameConfig.Builder, Snakes.GameConfigOrBuilder>(
                getConfig(),
                getParentForChildren(),
                isClean());
        config_ = null;
      }
      return configBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:snakes.GameState)
  }

  // @@protoc_insertion_point(class_scope:snakes.GameState)
  private static final Snakes.GameState DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Snakes.GameState();
  }

  public static Snakes.GameState getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<GameState>
      PARSER = new com.google.protobuf.AbstractParser<GameState>() {
    @java.lang.Override
    public GameState parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new GameState(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GameState> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GameState> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public Snakes.GameState getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

