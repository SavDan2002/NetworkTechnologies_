// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Snakes.proto

package Snakes;

public interface GameMessageOrBuilder extends
    // @@protoc_insertion_point(interface_extends:snakes.GameMessage)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
   * </pre>
   *
   * <code>required int64 msg_seq = 1;</code>
   * @return Whether the msgSeq field is set.
   */
  boolean hasMsgSeq();
  /**
   * <pre>
   * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
   * </pre>
   *
   * <code>required int64 msg_seq = 1;</code>
   * @return The msgSeq.
   */
  long getMsgSeq();

  /**
   * <pre>
   * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
   * </pre>
   *
   * <code>optional int32 sender_id = 10;</code>
   * @return Whether the senderId field is set.
   */
  boolean hasSenderId();
  /**
   * <pre>
   * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
   * </pre>
   *
   * <code>optional int32 sender_id = 10;</code>
   * @return The senderId.
   */
  int getSenderId();

  /**
   * <pre>
   * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
   * </pre>
   *
   * <code>optional int32 receiver_id = 11;</code>
   * @return Whether the receiverId field is set.
   */
  boolean hasReceiverId();
  /**
   * <pre>
   * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
   * </pre>
   *
   * <code>optional int32 receiver_id = 11;</code>
   * @return The receiverId.
   */
  int getReceiverId();

  /**
   * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
   * @return Whether the ping field is set.
   */
  boolean hasPing();
  /**
   * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
   * @return The ping.
   */
  Snakes.GameMessage.PingMsg getPing();
  /**
   * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
   */
  Snakes.GameMessage.PingMsgOrBuilder getPingOrBuilder();

  /**
   * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
   * @return Whether the steer field is set.
   */
  boolean hasSteer();
  /**
   * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
   * @return The steer.
   */
  Snakes.GameMessage.SteerMsg getSteer();
  /**
   * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
   */
  Snakes.GameMessage.SteerMsgOrBuilder getSteerOrBuilder();

  /**
   * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
   * @return Whether the ack field is set.
   */
  boolean hasAck();
  /**
   * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
   * @return The ack.
   */
  Snakes.GameMessage.AckMsg getAck();
  /**
   * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
   */
  Snakes.GameMessage.AckMsgOrBuilder getAckOrBuilder();

  /**
   * <code>.snakes.GameMessage.StateMsg state = 5;</code>
   * @return Whether the state field is set.
   */
  boolean hasState();
  /**
   * <code>.snakes.GameMessage.StateMsg state = 5;</code>
   * @return The state.
   */
  Snakes.GameMessage.StateMsg getState();
  /**
   * <code>.snakes.GameMessage.StateMsg state = 5;</code>
   */
  Snakes.GameMessage.StateMsgOrBuilder getStateOrBuilder();

  /**
   * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
   * @return Whether the announcement field is set.
   */
  boolean hasAnnouncement();
  /**
   * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
   * @return The announcement.
   */
  Snakes.GameMessage.AnnouncementMsg getAnnouncement();
  /**
   * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
   */
  Snakes.GameMessage.AnnouncementMsgOrBuilder getAnnouncementOrBuilder();

  /**
   * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
   * @return Whether the join field is set.
   */
  boolean hasJoin();
  /**
   * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
   * @return The join.
   */
  Snakes.GameMessage.JoinMsg getJoin();
  /**
   * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
   */
  Snakes.GameMessage.JoinMsgOrBuilder getJoinOrBuilder();

  /**
   * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
   * @return Whether the error field is set.
   */
  boolean hasError();
  /**
   * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
   * @return The error.
   */
  Snakes.GameMessage.ErrorMsg getError();
  /**
   * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
   */
  Snakes.GameMessage.ErrorMsgOrBuilder getErrorOrBuilder();

  /**
   * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
   * @return Whether the roleChange field is set.
   */
  boolean hasRoleChange();
  /**
   * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
   * @return The roleChange.
   */
  Snakes.GameMessage.RoleChangeMsg getRoleChange();
  /**
   * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
   */
  Snakes.GameMessage.RoleChangeMsgOrBuilder getRoleChangeOrBuilder();

  public Snakes.GameMessage.TypeCase getTypeCase();
}
