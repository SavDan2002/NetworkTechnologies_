// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Snakes.proto

package Snakes;

public interface GameConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:snakes.GameConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Ширина поля в клетках (от 10 до 100)
   * </pre>
   *
   * <code>optional int32 width = 1 [default = 40];</code>
   * @return Whether the width field is set.
   */
  boolean hasWidth();
  /**
   * <pre>
   * Ширина поля в клетках (от 10 до 100)
   * </pre>
   *
   * <code>optional int32 width = 1 [default = 40];</code>
   * @return The width.
   */
  int getWidth();

  /**
   * <pre>
   * Высота поля в клетках (от 10 до 100)
   * </pre>
   *
   * <code>optional int32 height = 2 [default = 30];</code>
   * @return Whether the height field is set.
   */
  boolean hasHeight();
  /**
   * <pre>
   * Высота поля в клетках (от 10 до 100)
   * </pre>
   *
   * <code>optional int32 height = 2 [default = 30];</code>
   * @return The height.
   */
  int getHeight();

  /**
   * <pre>
   * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
   * </pre>
   *
   * <code>optional int32 food_static = 3 [default = 1];</code>
   * @return Whether the foodStatic field is set.
   */
  boolean hasFoodStatic();
  /**
   * <pre>
   * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
   * </pre>
   *
   * <code>optional int32 food_static = 3 [default = 1];</code>
   * @return The foodStatic.
   */
  int getFoodStatic();

  /**
   * <pre>
   * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
   * </pre>
   *
   * <code>optional float food_per_player = 4 [default = 1];</code>
   * @return Whether the foodPerPlayer field is set.
   */
  boolean hasFoodPerPlayer();
  /**
   * <pre>
   * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
   * </pre>
   *
   * <code>optional float food_per_player = 4 [default = 1];</code>
   * @return The foodPerPlayer.
   */
  float getFoodPerPlayer();

  /**
   * <pre>
   * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
   * </pre>
   *
   * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
   * @return Whether the stateDelayMs field is set.
   */
  boolean hasStateDelayMs();
  /**
   * <pre>
   * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
   * </pre>
   *
   * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
   * @return The stateDelayMs.
   */
  int getStateDelayMs();

  /**
   * <pre>
   * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
   * </pre>
   *
   * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
   * @return Whether the deadFoodProb field is set.
   */
  boolean hasDeadFoodProb();
  /**
   * <pre>
   * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
   * </pre>
   *
   * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
   * @return The deadFoodProb.
   */
  float getDeadFoodProb();

  /**
   * <pre>
   * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
   * </pre>
   *
   * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
   * @return Whether the pingDelayMs field is set.
   */
  boolean hasPingDelayMs();
  /**
   * <pre>
   * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
   * </pre>
   *
   * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
   * @return The pingDelayMs.
   */
  int getPingDelayMs();

  /**
   * <pre>
   * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
   * </pre>
   *
   * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
   * @return Whether the nodeTimeoutMs field is set.
   */
  boolean hasNodeTimeoutMs();
  /**
   * <pre>
   * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
   * </pre>
   *
   * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
   * @return The nodeTimeoutMs.
   */
  int getNodeTimeoutMs();
}
